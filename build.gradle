plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

def mcVersion = stonecutter.current.version
version = project.mod_version + "+" + mcVersion
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenLocal()
	maven {
		url = "https://jitpack.io"
		content {
			includeGroup("com.github.Chocohead")
		}
	}
	maven {
		name = "FzzyMaven"
		url = "https://maven.fzzyhmstrs.me/"
	}
}

def awFile = "${mcVersion}.accesswidener"

loom {
	accessWidenerPath = file("../../src/main/resources/${awFile}")
	runConfigs.all {
		ideConfigGenerated true // Run configurations are not created for subprojects by default
		runDir "../../run" // Use a shared run folder and create separate worlds
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modApi "dev.sygii:attachmentsapi:1.1.4.3"
	modImplementation "me.fzzyhmstrs:fzzy_config:${project.fzzyConfigVersion}"

}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version, 'mcdep': project.property('supported_mc_versions'), 'javadep': stonecutter.eval(mcVersion, ">=1.20.5") ? '>=21' : '>=17', 'aw': awFile
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	def java = stonecutter.eval(mcVersion, ">=1.20.5")
			? JavaVersion.VERSION_21 : JavaVersion.VERSION_17
	targetCompatibility = java
	sourceCompatibility = java
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}